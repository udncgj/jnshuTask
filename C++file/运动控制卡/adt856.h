#ifndef	_H__
#define	_H__

typedef void (*FUNCTION)();
//  ////////////////////////////////////////////////////////////基本库函数////////////////////////////////////////////////////////

int _stdcall adt856_initial(void);
//  //////////////////////////////////////功能：初始化卡//////////////////////////////////////////////
//  (1)返回值>0时，表示adt856卡的数量。如果为3，则下面的可用卡号分别为0、1、2；
//  (2)返回值=0时，说明没有安装adt856卡；
//  (3)返回值<0时，-1表示没有安装端口驱动程序，-2表示PCI桥故障。
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall adt856_end(void);
//  //////////////////////////////////////////////功能：释放卡//////////////////////////////////////////
//  返回值           0：正确           1：错误
//  此函数应在程序结束时调用。（仅用于Windows NT/2000）。
//  用于将ADT856卡占用的资源释放
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_stop0_mode(int cardno,int axis,int value,int logic);

//  //////////////////////////功能：设定stop0输入信号的模式//////////////////////////////
//  cardno          卡号
//  axis            轴号(1 - 4)
//  value           0: 无效            1: 有效
//  logic           0: 低电平停止      1: 高电平停止
//  返回值           0: 正确           1: 错误
//  默认模式为：：无效，低电平停止
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_stop1_mode(int cardno,int axis,int value,int logic);
//  ////////////////////////////功能：设定stop1输入信号的模式//////////////////////////
//  cardno          卡号
//  axis            轴号(1 - 4)
//  value           0: 无效            1: 有效
//  logic           0: 低电平停止      1: 高电平停止
//  返回值           0: 正确           1: 错误
//  默认模式为：：无效，低电平停止
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_stop2_mode(int cardno,int axis,int value,int logic);
//  //////////////////////////功能：设定stop1输入信号的模式////////////////////////////
//  cardno         卡号
//  axis           轴号(1 - 4)
//  value          0: 无效            1: 有效
//  logic          0: 低电平停止      1: 高电平停止
//  返回值          0: 正确           1: 错误
//  默认模式为：：无效，低电平停止
//  STOP2信号有效时同时可清除实位计数器。
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_actualcount_mode(int cardno,int axis,int value,int dir,int freq);
//  ////////////////////////////功能：设置实位计数器的工作方式////////////////////////
//  cardno        卡号
//  axis          轴号(1 - 4)
//  value         输入脉冲方式
//                0：A/B脉冲输入     1：上/下（PPIN/PMIN）脉冲输入
//  dir 计数方向
//  0:  A超前B或PPIN脉冲输入向上计数 B超前A或PMIN脉冲输入向下计数
//  1:  B超前A或PMIN脉冲输入向上计数 A超前B或PPIN脉冲输入向下计数
//  freq         A/B脉冲输入时的倍频，上/下脉冲输入时无效
//              0：4倍频
//              1：2倍频
//              2:不倍频
//  返回值      0: 正确              1: 错误
//  默认模式为：A/B相脉冲输入，方向为0，4倍频
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_pulse_mode(int cardno,int axis,int value,int logic,int dir_logic);
//  ////////////////////////////功能：设置输出脉冲的工作方式////////////////////////////
//  cardno       卡号
//  axis         轴号(1 - 4)
//  value        0： 脉冲+脉冲方式     1：脉冲+方向方式
//  logic        0:        正逻辑脉冲  1:           负逻辑脉冲
//  dir-logic    0：方向输出信号正逻辑  1：方向输出信号负逻辑
//  返回值        0: 正确              1: 错误
//  默认模式为：脉冲+方向方式，正逻辑脉冲，方向输出信号正逻辑
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_limit_mode(int cardno,int axis,int value,int logic);
//  //////////////////////////功能：设定正/负方向限位输入nLMT信号的模式设定//////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0: 有效时立即停止      1: 有效时减速停止
//  logic       0: 低电平有效          1: 高电平有效
//  返回值       0: 正确               1: 错误
//  默认模式为：立即停止，低电平有效
//  注意： 限位信号不能设置成有效/无效。
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_softlimit_mode1(int cardno,int axis,int value);
//  ////////////////////////////功能：COMP+寄存器做软件限制的设定//////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0: 无效              1: 有效
//  返回值       0: 正确              1: 错误
//  默认模式为: 无效
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_softlimit_mode2(int cardno,int axis,int value);
//  //////////////////////功能：COMP-寄存器做软件限制的设定////////////////////////
//  cardno      卡号
//  axis         轴号(1 - 4)
//  value       0: 无效              1: 有效
//  返回值      0: 正确               1: 错误
//  默认模式为: 无效
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_softlimit_mode3(int cardno,int axis,int value);
//  //////////////////////////功能：COMP+/-寄存器的比较对象设定////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0: 逻辑位置计数器     1: 实际位置计数器
//  返回值       0: 正确              1: 错误
//  默认模式为:  逻辑位置计数器
//  //  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_inpos_mode(int cardno,int axis,int value,int logic);
//  //////////////////////////////功能：伺服到位信号nINPOS的设定//////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0: 无效              1: 有效
//  logic       0: 低电平有效         1: 高电平有效
//  返回值       0: 正确              1: 错误
//  默认模式为 : 无效，低电平有效
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_alarm_mode(int cardno,int axis,int value,int logic);
//  //////////////////////////功能：伺服报警信号nALARM的设定//////////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0: 无效               1: 有效
//  logic       0: 低电平有效         1: 高电平有效
//  返回值       0: 正确              1: 错误
//  默认模式为 : 无效，低电平有效
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_ad_mode(int cardno,int axis,int value);
//  ////////////////////////////功能：加/减速方式的设定//////////////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0：直线加/减速        1：S曲线加/减速
//  返回值       0: 正确              1: 错误
//  默认模式为 : 直线加/减速
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_dec1_mode(int cardno,int axis,int value);
//  ////////////////////////////////功能：非对称梯形加/减速的设定//////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       减速度使用
//             0：加速度的值（即对称加减速）1：减速度的值（即非对称加减速）
//  返回值      0: 正确               1: 错误
//  默认模式为:  对称加减速
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_dec2_mode(int cardno,int axis,int value);
//  ////////////////////////功能：加/减速定量驱动的减速方式的设定////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0: 自动减速           1: 手动减速
//  返回值       0: 正确              1: 错误
//  默认模式为:  自动减速
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_circle_mode(int cardno,int axis,int value);
//  //////////////////////////功能：计数器的可变环功能的设定////////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       0: 无效              1: 有效
//  返回值       0: 正确              1: 错误
//  默认模式为:  无效
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_input_filter(int cardno,int axis,int number,int value);
//  //////////////////////////////功能：输入信号滤波功能设置//////////////////////////
//  cardno      卡号
//  axis        轴号
//  number      输入类别
//  1:             LMT +、LMT -、 STOP0、STOP1
//  2:             STOP2
//  3:             nINPOS、nALARM
//  4:             nIN
//              即可分别设置上面四类输入信号的滤波状态
//  value       0: 滤波无效           1: 滤波有效
//  默认模式为:  无效
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_filter_time(int cardno,int axis,int value);
//  //////////////////////////功能：输入信号滤波时间常数设置卡//////////////////////////
//  cardno       卡号
//  axis         轴号
//  value       可以除去最大噪音幅度(范围)   输入信号延迟(范围)
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_vector_speed(int cardno, int mode);
/************************固定线速度模式设置************************
功能:固定线速度模式设置
参数:
cardno 卡号   
mode―0|不采用固定线速度
1|采用固定线速度
返回值         0：正确          1：错误
说明:线速度是指矢量速度,固定线速度可以保证插补时合成速度固定
******************************************************************/


//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  
//  //////////////////////////////////////驱动状态检查函数////////////////////////////////////////
//  
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
int _stdcall get_status(int cardno,int axis,int *value);
//  ////////////////////////////////功能：获取各轴的驱动状态////////////////////////////////
//  cardno      卡号
//  axis        轴号(1 - 4)
//  value       驱动状态的指针
//               0:驱动结束            非0: value为两个字节长度的值
//  返回值       0: 正确                1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall get_stopdata(int cardno,int axis,int *value);
//  ////////////////////////////功能：获取各轴的错误停止信息////////////////////////////
//  cardno      卡号
//  axis         轴号
//  value       错误状态的指针
//              0:无错误               非0: value为两个字节长度的值
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall get_inp_status(int cardno,int no,int *value);
//  //////////////////////////////功能：获取插补的驱动状态//////////////////////////////////
//  cardno      卡号
//  no          1：X-Y轴插补或3轴以上插补   2：Z-W轴插补
//  value       插补状态的指针
//              0:插补结束              1: 正在插补
//  返回值      0: 正确                 1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall get_inp_status2(int cardno,int no,int *value);
//  ////////////////////////功能：取连续插补的允许写入状态////////////////////////
//  cardno     卡号
//  no         1：X-Y轴插补或3轴以上插补   2：Z-W轴插补
//  value       状态的指针
//             0:不允许写入            1: 允许写入
//  返回值      0: 正确                1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------//
//               运动参数设定函数                     //
//----------------------------------------------------//
int _stdcall set_range(int cardno, int axis,long Value);
//  ////////////////////////////////////功能： 范围设定//////////////////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value      R值 范围（8000000-16000）
//  返回值     0: 正确                 1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_acac(int cardno, int axis,long Value);
//  ////////////////////////////////功能：加/减速度的变化率设定////////////////////////
//  cardno      卡号
//  axis        轴号
//  value        K值(1 - 65535)
//  返回值      0: 正确               1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_acc(int cardno, int axis,long Value);
//  //////////////////////////////////////功能：加速度设定//////////////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value      A值(1 - 8000)
//  返回值     0: 正确               1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_dec(int cardno, int axis,long Value);
//  ////////////////////////////////功能：减速度设定////////////////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value      D值(1 - 8000)
//  返回值      0: 正确              1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_startv(int cardno, int axis,long Value);
//  ////////////////////////////////////////////功能：初始速度设定//////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value      SV值(1 - 8000)
//  返回值      0: 正确             1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_speed(int cardno, int axis,long Value);
//  //////////////////////////////////功能：驱动速度设定//////////////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value        V值(1 - 8000)
//  返回值       0: 正确            1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_command_pos(int cardno, int axis,long Value);
//  ////////////////////////////////功能：逻辑位置计数器设定//////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value      范围值（-2147483648~+2147483647）
//  返回值      0: 正确             1: 错误
//  逻辑位置计数器任何时候都能写?任何时候都能读
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_actual_pos(int cardno, int axis,long Value);
//  //////////////////////////功能：实际位置计数器设定////////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value      范围值（-2147483648~+2147483647）
//  返回值     0: 正确              1: 错误
//  实际位置计数器任何时候都能写?任何时候都能读
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_comp1(int cardno, int axis,long Value);
//  ////////////////////////////////////功能：COMP+寄存器设定//////////////////////////////
//  cardno     卡号
//  axis        轴号
//  value       范围值（-2147483648~+2147483647）
//  返回值      0: 正确             1: 错误
//  COMP 寄存器任何时候都能写
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_comp2(int cardno, int axis,long Value);
//  ////////////////////////////////////功能：COMP-寄存器设定//////////////////////////////
//  cardno     卡号
//  axis       轴号
//  value      范围值（-2147483648~+2147483647）
//  返回值      0: 正确            1: 错误
//  COMP -寄存器任何时候都能写
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall set_dec_pos(int cardno, int axis,long Value);
//  ////////////////////////////////////功能：手动减速点设定////////////////////////////////
//  cardno     卡号
//  axis        轴号
//  value      范围值（0~268435455）
//  返回值      0: 正确           1: 错误
//  在使用手动减速模式时必须设定好手动减速点
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------//
//               运动参数检查函数                     //
//----------------------------------------------------//
int _stdcall get_command_pos(int cardno,int axis,long *pos);
//  //////////////////////////////功能：获取各轴的逻辑位置卡////////////////////////////
//  cardno     卡号
//  axis       轴号
//  pos        逻辑位置值的指针
//  返回值      0: 正确           1: 错误
//  此函数可随时得到轴的逻辑位置，在电机未失步的情况下，pos的值表示轴的当前位置。
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall get_actual_pos(int cardno,int axis,long *pos);
//  ////////////////////////////////功能：获取各轴的实际位置////////////////////////////////
//  cardno     卡号
//  axis       轴号
//  pos        实际位置值的指针
//  返回值      0: 正确           1: 错误
//  此函数可随时得到轴的实际位置，在电机有失步的情况下，pos的值依然表示轴的实际位置。
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall get_speed(int cardno,int axis,long *pos);
//  //////////////////////////*8功能：获取各轴的当前驱动速度//////////////////////////
//  cardno     卡号
//  axis       轴号
//  pos      当前驱动速度的指针
//  返回值      0: 正确           1: 错误
//  数据的单位和驱动设定数值V一样
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall get_ad(int cardno,int axis,long *pos);
//  //////////////////////////////////功能：获取各轴的当前加速度////////////////////////
//  cardno     卡号
//  axis       轴号
//  pos         当前加速度的指针
//  返回值       0: 正确          1: 错误
//  数据的单位和驱动加速度设定数值A一样
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------//
//                   驱动函数                         //
//----------------------------------------------------//
int _stdcall pmove(int cardno,int axis,long pulse);
//  ////////////////////////////////功能：定量驱动////////////////////////////////////////
//  cardno      卡号
//  axis        轴号
//  pulse      输出的脉冲数            范围（-268435455~+268435455）
//             >0：正方向移动          <0：负方向移动
//  返回值       0: 正确               1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall continue_move(int cardno,int axis,int dir);
//  ////////////////////////////////////功能：连续驱动////////////////////////////////
//  cardno      卡号
//  axis        轴号
//  dir          驱动的方向
//               0:正方向移动        1: 负方向移动
//  返回值        0: 正确            1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall dec_stop(int cardno,int axis);
//  ////////////////////////////////////////功能：驱动减速停止////////////////////////////////////
//  cradno      卡号
//  axis        轴号
//  返回值       0: 正确            1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall sudden_stop(int cardno,int axis);
//  //////////////////////////////////////功能：驱动立即停止//////////////////////////////////////
//  cardno      卡号
//  axis        轴号
//  返回值      0: 正确             1: 错误
//  立即停止正在驱动中的脉冲输出，在加/减速驱动中也立即停止。
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall inp_move2(int cardno,int no,long pulse1,long pulse2);
//  ////////////////////////////////////功能：两轴直线插补////////////////////////////////////////
//  cardno     卡号
//  no         参与插补的轴号         1：X-Y     2：Z-W 3：U-V
//  pulse1,pulse2   移动的相对距离    范围（-8388608~+8388607）
//  返回值      0: 正确             1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall inp_cw_arc(int cardno,int no,long x,long y,long i,long j);
//  ////////////////////////////////////功能：顺时针CW圆弧插补////////////////////////////////
//  cardno     卡号
//  no         参与插补的轴号         1：X-Y    2：Z-W   3：U-V
//  x,y        圆弧插补的终点位置（相对于起点）        范围（-8388608~+8388607）
//  i,j        圆弧插补的圆心点位置（相对于起点）      范围（-8388608~+8388607）
//  返回值 0: 正确 1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall inp_ccw_arc(int cardno,int no,long x,long y,long i,long j);
//  //////////////////////////////功能：逆时针CCW圆弧插补////////////////////////////////////
//  cardno     卡号
//  no         1：X-Y     2：Z-W   3：U-V
//  x,y        圆弧插补的终点位置（相对于起点）        范围（-8388608~+8388607）
//  i,j        圆弧插补的圆心点位置（相对于起点）      范围（-8388608~+8388607）
//  返回值 0: 正确 1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall inp_move3(int cardno,long pulse1,long pulse2,long pulse3);
//  ////////////////////////////////////功能：三轴直线插补////////////////////////////////
//  cardno      卡号
//  pulse1,pulse2,pulse3                   X-Y-Z轴移动的相对距离
//  范围（-8388608~+8388607）
//  三轴插补只能进行X?Y?Z轴三轴插补
//  返回值     0: 正确                  1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall inp_move4(int cardno,long pulse1,long pulse2,long pulse3,long pulse4);
//  ////////////////////////////////功能：四轴直线插补////////////////////////////////
//  cardno     卡号
//  pulse1,pulse2,pulse3,pulse4             X-Y-Z-W轴移动的相对距离
//  范围（-8388608~+8388607）
//  返回值    0: 正确                   1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall inp_move6(int cardno,long pulse1,long pulse2,long pulse3,long pulse4,long pulse5,long pulse6);
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  cardno:  卡号
//         pulse1 , pulse2, pulse3, pulse4, pulse5, pulse6:
//          x -y - z - w - U - V轴移动的相对距离
//         返回值 0: 正确 1: 错误
//   注意：六轴插补的速度以X 轴速度为基准，Z与U轴的倍率及驱动速度应
//  设置和X轴的倍率及驱动速度相同，Z与U轴的初速度应设置成与X轴的驱
//  动速度一样（不是X轴的初始速度）。Y、W、V无须设定。
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall inp_dec_enable(int cardno, int no);
//  ////////////////////////////////////功能：插补减速允许////////////////////////////////
//  cardno     卡号
//  no         1：X-Y或X-Y-Z或X-Y-Z-W插补 2：Z-W插补
//  返回值     0: 正确                 1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall inp_dec_disable(int cardno, int no);
//  //////////////////////////////////功能：插补减速禁止////////////////////////////////////
//  cardno     卡号
//  no          1：X-Y或X-Y-Z或X-Y-Z-W插补      2：Z-W插补
//  返回值       0: 正确               1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall inp_clear(int cardno);

//  //////////////////////////////////功能：插补错误清除////////////////////////////////////////
//  cardno     卡号
//  返回值      0: 正确                1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//  //////////////////////////////////////////开关量输入输出类//////////////////////////////////////////

//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int _stdcall read_bit(int cardno,int number);
//  //////////////////////////////////功能：读单个输入点////////////////////////////////////////
//  cardno     卡号
//  number     输入点(0 - 47)
//  返回值      0: 低电平             1: 高电平         -1: 错误
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall write_bit(int cardno,int number,int value);
//  ////////////////////////////////////////功能：输出单点//////////////////////////////////////////
//  cardno     卡号
//  number     输出点(0 - 31)
//  value      0: 低             1: 高
//  返回值      0: 正确           1: 错误
//  输出数对应相应的输出号
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////

//  ----------------------------------------------------//  
//                        复合驱动类                    //  
//  说明:以下函数是为了方便客户的使用而增加的函数          //  
//  ----------------------------------------------------//  
int _stdcall symmetry_relative_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, long vacc, int mode);  
//  //////////////////////////////////////////////单轴对称相对运动//////////////////////////////////////
//  //功能:参照当前位置,以对称加减速进行定量移动
//  //参数:
//        cardno -卡号
//        axis ---轴号
//        pulse --脉冲
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall symmetry_absolute_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, long vacc, int mode);
//  ////////////////////////////////////////////单轴对称绝对移动////////////////////////////////////////
//  //功能:参照零点位置,以对称加减速进行定量移动
//  //参数:
//        cardno -卡号
//        axis ---轴号
//        pulse --脉冲
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_absolute_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  ////////////////////////////////////////单轴非对称相对运动////////////////////////////////////////
//  //功能:参照当前位置,以非对称加减速进行定量移动
//  //参数:
//        cardno -卡号
//        axis ---轴号
//        pulse --脉冲
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加 / 减速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_relative_move(int cardno, int axis, long pulse, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////////////单轴非对称绝对运动//////////////////////////////////////
//  //功能:参照零点位置,以非对称加减速进行定量移动
//  //参数:
//        cardno -卡号
//        axis ---轴号
//        pulse --脉冲
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall symmetry_relative_line2(int cardno, int no, long pulse1, long pulse2, long lspd ,long hspd, double tacc, long vacc, int mode);
//  //////////////////////////////////两轴对称直线插补相对移动//////////////////////////////////
//  //功能:参照当前位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        no----参与插补的轴号 1：X-Y     2：Z-W
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall symmetry_absolute_line2(int cardno, int no, long pulse1, long pulse2, long lspd ,long hspd, double tacc, long vacc, int mode);  
//  //////////////////////////////////两轴对称直线插补绝对移动//////////////////////////////////
//  //功能:参照零点位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        no----参与插补的轴号 1：X-Y     2：Z-W
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _stdcall unsymmetry_relative_line2(int cardno, int no, long pulse1, long pulse2, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);

//  //////////////////////////////////两轴非对称直线插补相对移动////////////////////////////////
//  //功能:参照当前位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        no----参与插补的轴号 1：X-Y     2：Z-W
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加 / 减速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_absolute_line2(int cardno, int no, long pulse1, long pulse2, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////两轴非对称直线插补绝对移动////////////////////////////////
//  //功能:参照零点位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        no----参与插补的轴号 1：X-Y     2：Z-W
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall symmetry_relative_line3(int cardno, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, long vacc, int mode);  
//  //////////////////////////////////三轴对称直线插补相对运动////////////////////////////////
//  //功能:参照当前位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall symmetry_absolute_line3(int cardno, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, long vacc, int mode);
//  //////////////////////////////////三轴对称直线插补绝对运动////////////////////////////////
//  //功能:参照零点位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_relative_line3(int cardno, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////三轴非对称直线插补相对运动////////////////////////////////
//  //功能:参照当前位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////




int _stdcall unsymmetry_absolute_line3(int cardno, long pulse1, long pulse2, long pulse3, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////三轴非对称直线插补绝对运动////////////////////////////////
//  //功能:参照零点位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall symmetry_relative_line4(int cardno, long pulse1, long pulse2, long pulse3,long pulse4,  long lspd ,long hspd, double tacc, long vacc, int mode);  
//  //////////////////////////////////四轴对称直线插补相对运动////////////////////////////////
//  //功能:参照当前位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall symmetry_absolute_line4(int cardno, long pulse1, long pulse2, long pulse3, long pulse4, long lspd ,long hspd, double tacc, long vacc, int mode);
//  //////////////////////////////////四轴对称直线插补绝对运动////////////////////////////////
//  //功能:参照零点位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_absolute_line4(int cardno, long pulse1, long pulse2, long pulse3, long pulse4,long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////四轴非对称直线插补相对运动////////////////////////////////
//  //功能:参照当前位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_relative_line4(int cardno, long pulse1, long pulse2, long pulse3, long pulse4,long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////四轴非对称直线插补绝对运动////////////////////////////////
//  //功能:参照零点位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////




int _stdcall symmetry_relative_line6(int cardno, long pulse1, long pulse2, long pulse3,long pulse4, long pulse5,long pulse6,  long lspd ,long hspd, double tacc, long vacc, int mode);  
//  //////////////////////////////////六轴对称直线插补相对运动////////////////////////////////
//  //功能:参照当前位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        pulse5 --脉冲5
//        pulse6 --脉冲6
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  //////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall symmetry_absolute_line6(int cardno, long pulse1, long pulse2, long pulse3, long pulse4, long pulse5,long pulse6,  long lspd ,long hspd, double tacc, long vacc, int mode); 
//  //////////////////////////////////六轴对称直线插补绝对运动////////////////////////////////
//  //功能:参照零点位置,以对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        pulse5 --脉冲5
//        pulse6 --脉冲6
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_relative_line6(int cardno, long pulse1, long pulse2, long pulse3, long pulse4, long pulse5,long pulse6, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////六轴非对称直线插补相对运动////////////////////////////////
//  //功能:参照当前位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        pulse5 --脉冲5
//        pulse6 --脉冲6
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int _stdcall unsymmetry_absolute_line6(int cardno, long pulse1, long pulse2, long pulse3, long pulse4, long pulse5,long pulse6, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  //////////////////////////////////六轴非对称直线插补绝对运动////////////////////////////////
//  //功能:参照零点位置,以非对称加减速进行直线插补
//  //参数:
//        cardno -卡号
//        pulse1 --脉冲1
//        pulse2 --脉冲2
//        pulse3 --脉冲3
//        pulse4 --脉冲4
//        pulse5 --脉冲5
//        pulse6 --脉冲6
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  //////////////////////////******************************************

int _stdcall symmetry_relative_arc(int cardno, int no, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, long vacc, int mode);  
//  *****************两轴对称圆弧插补相对移动*****************
//  *功能:参照当前位置,以对称加减速进行圆弧插补
//  *参数:
//        cardno -卡号
//        no---参与插补的轴号 1：X-Y     2：Z-W
//        x,y ----圆弧终点坐标
//        i,j ----圆心坐标
//        dir -----运动方向(0 - 顺时针, 1 - 逆时针)
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ********************************************************



int _stdcall symmetry_absolute_arc(int cardno, int no, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, long vacc, int mode) ; 
//  ******************两轴对称圆弧插补绝对移动*****************
//  *功能:参照零点位置,以对称加减速进行圆弧插补
//  *参数:
//        cardno -卡号
//        no---参与插补的轴号 1：X-Y     2：Z-W
//        x,y ----圆弧终点坐标
//        i,j ----圆心坐标
//        dir -----运动方向(0 - 顺时针, 1 - 逆时针)
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  *********************************************************



int _stdcall unsymmetry_relative_arc(int cardno, int no, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  *****************两轴非对称圆弧插补相对移动****************
//  *功能:参照当前位置,以非对称加减速进行圆弧插补
//  *参数:
//        cardno -卡号
//        no---参与插补的轴号 1：X-Y     2：Z-W
//        x,y ----圆弧终点坐标
//        i,j ----圆心坐标
//        dir -----运动方向(0 - 顺时针, 1 - 逆时针)
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ******************************************************

int _stdcall unsymmetry_absolute_arc(int cardno, int no, long x, long y, long i, long j, int dir, long lspd ,long hspd, double tacc, double tdec, long vacc, int mode);
//  *****************两轴非对称圆弧插补绝对移动****************
//  *功能:参照零点位置,以非对称加减速进行圆弧插补
//  *参数:
//        cardno -卡号
//        no---参与插补的轴号 1：X-Y     2：Z-W
//        x,y ----圆弧终点坐标
//        i,j ----圆心坐标
//        dir -----运动方向(0 - 顺时针, 1 - 逆时针)
//        lspd ---低速
//        hspd ---高速
//        tacc---加速时间(单位:秒)
//        tdec---减速时间(单位:秒)
//        vacc ---加速度变化率
//        mode---模式(梯形(0)还是S曲线(1))
//  ********************************************************



//*********************************************//
//               回原点                        //
//*********************************************//

int _stdcall SetHomeMode_Ex(int m_nCardNum,int m_nAxisNum,int m_nHomeDir, int m_nStop0Active,int m_nLimitActive,int m_nStop1Active,
							long m_nBackRange,long m_nEncoderZRange,long m_nOffset);
///////////////////////////////////////////////////
//功能：设置回零信号，步骤参数
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
// 	int    m_nHomeDir		//回零方向 0:负方向 1:正方向
// 	int    m_nStop0Active	//stop0 有效电平设置；0：低电平停止	1：高电平停止
// 	int    m_nLimitActive	//limit信号 有效电平设置；0：低电平停止	1：高电平停止
// 	int    m_nStop1Active	//stop1 有效电平设置；0：低电平停止	1：高电平停止 -1:不启用编码器Z相信号
// 	long   m_nBackRange		//碰到stop0信号后，反向退出stop0的距离 >1
// 	long   m_nEncoderZRange	//编码器Z相范围(电机旋转一圈所需脉冲数，不启用编码器Z相时也需设置成大于1的值) >1
// 	long   m_nOffset		//原点偏移量(回原点成功后是否需要偏移一段位移)；==0不偏移，>0正方向偏移，<0负方向偏移	
//返回值		0：正确					(-1～-8)：错误类型
//错误信息提示
//  -1   //参数1错误
//  -2   //参数2错误
//  -3   //参数3错误
//  -4   //参数4错误
//  -5   //参数5错误
//  -6   //参数6错误
//  -7   //参数7错误
//  -8   //参数8错误
////////////////////////////////////////////////////
int _stdcall SetHomeSpeed_Ex(int m_nCardNum,int m_nAxisNum,long m_nStartSpeed,long m_nSearchSpeed,long m_nHomeSpeed,long m_nAcc,long m_nZPhaseSpeed);
///////////////////////////////////////////////////
//功能：回零速度参数
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
// 	long   m_nStartSpeed	//原点(STOP0)搜寻起始速度
// 	long   m_nSearchSpeed	//原点搜寻速度
// 	long   m_nHomeSpeed		//低速接近原点速度
// 	long   m_nAcc			//回原点过程中的加速度
// 	long   m_nZPhaseSpeed	//编码器Z相(STOP1)搜寻速度
//返回值		0：正确					-1至-7：错误类型
//错误信息提示
//  -1   //参数1错误
//  -2   //参数2错误
//  -3   //参数3错误
//  -4   //参数4错误
//  -5   //参数5错误
//  -6   //参数6错误
//  -7   //参数7错误
///////////////////////////////////////////////////

int _stdcall HomeProcess_Ex(int m_nCardNum,int m_nAxisNum);
///////////////////////////////////////////////////
//功能：启动回零
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
//返回值		0：正确					1：错误
//说明	调用该函数时启动回零动作
////////////////////////////////////////////////////

int _stdcall GetHomeStatus_Ex(int m_nCardNum,int m_nAxisNum);
///////////////////////////////////////////////////
//功能：获取回零状态
//参数：
// 	int    m_nCardNum		//卡号
// 	int    m_nAxisNum		//轴号
//返回值:(0-11):回零步骤，(-3至-1)参数错误或回零未启动
//返回值表示回原点步骤：1 :快速接近原点，搜索STOP0
//						2 :检查STOP0是否找到
//						3 :反向退出原点
//						4 :检查反向退出原点是否完成
//						5 :低速接近原点，搜索STOP0
//						6 :检查STOP0搜索是否完成
//						7 :低速接近Z相，搜索STOP1.如果STOP1设置为-1，则跳过7,8两步。
//						8 :检查STOP1搜索是否完成
//						9 :原点偏移
//					   10 :检查原点偏移
//错误信息提示
//  -1   //参数1错误
//  -2   //参数2错误
//  -3   //回零未启动						
////////////////////////////////////////////////////


#endif

